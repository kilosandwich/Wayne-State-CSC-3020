/******************************************************************************

Extra Credit - Coffee Shop (20 points) 
Points earned in this part can be added to exams or assignments. 
Jason opened a coffee shop at the beach and sells coffee in three sizes: small (9oz), medium (12oz), and large (15oz). The cost of one small cup is $1.75, one medium cup is $1.90, and one large cup is $2.00.
Write a menu-driven program that will make the coffee shop operational. Your program should allow the user to do the following:
•	Buy coffee in any size and in any number of cups.
•	At any time show the total number of cups of each size sold.
•	At any time show the total amount of coffee sold.
•	At any time show the total money made.

Your program should consist of at least the following functions: 
a.	a function to print the menu
b.	a function to order the coffee (option 1)
c.	a function to check the total money made up (option 2),
d.	a function to check the total amount of coffee sold up (option 3)
e.	a function to check the number of cups of coffee of each size sold (option 4)
f.	a function that print the data (option 5). 

Special values such as coffee cup sizes and cost of a coffee cup must be declared as named constants.


Extra Credit Grading Criteria: 

•	2 points for each of the functions a to f excluding part b  (total 10 points)
•	5 points Main function with Menu driven 
•	5 points for part b (order the coffee)

Sample Output:

1: Enter 1 to order coffee.
2: Enter 2 to check the total money made up to this time.
3: Enter 3 to check the total amount of coffee sold up to this time.
4: Enter 4 to check the number of cups of coffee of each size sold.
5: Enter 5 to print the data.
9: Enter 9 to exit the program.

*******************************************************************************/

//I am really regretting not making my previous programs have more modular code.
import java.util.Scanner;
//REMINDER YOU CANNOT RENAME CLASSES FROM MAIN IN ONLINEGDB, Seriously I can't find a way around it
public class Main
{
    
    //class variables for coffees and constants for their prices. 
    int cs = 0;
    int cm = 0;
    int cl = 0;
    final double CSC = 1.75;
    final double CMC = 1.90;
    final double CLC = 2.00;
    final int CSO = 9;
    final int CMO = 12;
    final int CLO = 15;
    
	public static void main(String[] args) {
	    Scanner scanner = new Scanner(System.in);
		Main coffeeShop = new Main();
		//due tot he nifty system.exit command, we don't need to break loops!
		while(true){
		    coffeeShop.printMenu(scanner);
	}
	}
	
	void printMenu(Scanner scanner){
        System.out.println("Enter one of the following commands:");
        System.out.println("1: Enter 1 to order coffee.");
        System.out.println("2: Enter 2 to check the total money made up to this time.");
        System.out.println("3: Enter 3 to check the total amount of coffee sold up to this time.");
        System.out.println("4: Enter 4 to check the number of cups of coffee of each size sold.");
        System.out.println("5: Enter 5 to print the data.");
        System.out.println("9: Enter 9 to exit the program.");
        
        //Theoretically, the user could type in any sentence as long 
        //as the first character was the correct command. I am still
        //unsure of how to get around this oversight. 
        char command = scanner.next().charAt(0);
        //probably could have used NextInt, but this is recycled from the swim lesson. 
        
        //switch statement that picks the commands from a list.
        //bless switch for saving me the pain of else if
        switch (command) {
            case '1':
                orderCoffee(scanner);
                break;
            case '2':
                moneyMade();
                break;
            case '3':
                sold();
                break;
            case '4':
                coffeeSold();
                break;
            case '5':
                printData();
                break;
            case '9':
                System.out.println("Exiting program. Goodbye!");
                System.exit(0); //why exit the loop, just exit everything
            default:
            //the user used an invalid input. The program does not break
                System.out.println("Invalid command. Please try again.");
        }

	}
	void orderCoffee(Scanner scanner){
        System.out.println("1: Enter 1 to buy coffee in a small cup size (9 oz)");
        System.out.println("2: Enter 2 to buy coffee in a medium cup size (12 oz)");
        System.out.println("3: Enter 3 to buy coffee in a large cup size (15 oz)");
        System.out.println("9: Enter 9 to exit the program.");
        
        //Theoretically, the user could type in any sentence as long 
        //as the first character was the correct command. I am still
        //unsure of how to get around this oversight. 
        char command = scanner.next().charAt(0);
        //probably could have used NextInt, but this is recycled from the swim lesson. 
        
        //switch statement that picks the commands from a list.
        //bless switch for saving me the pain of else if
        switch (command) {
            case '1':
                //order small coffee
                buySmallCoffee(scanner);
                break;
            case '2':
                //order medium coffee
                buyMediumCoffee(scanner);
                break;
            case '3':
                //order large coffee
                buyLargeCoffee(scanner);
                break;

            case '9':
                //we don't actually need to do anything. 
                break;
            default:
            //the user used an invalid input. The program does not break
                System.out.println("Invalid command. Please try again.");
        }
	}
	
	//this was originalyl one function but I forgot how to pass by value
	void buySmallCoffee(Scanner scanner){
	    System.out.println("Enter the number of cups: ");
	    int cups = scanner.nextInt();
	    cs += cups;
	    System.out.println("Please pay: $" + (cups*CSC));
	}
	
	void buyMediumCoffee(Scanner scanner){
	    System.out.println("Enter the number of cups: ");
	    int cups = scanner.nextInt();
	    cm += cups;
	    System.out.println("Please pay: $" + (cups*CMC));
	}
	
	void buyLargeCoffee(Scanner scanner){
	    System.out.println("Enter the number of cups: ");
	    int cups = scanner.nextInt();
	    cl += cups;
	    System.out.println("Please pay: $" + (cups*CLC));
	}
	
	//money printing function, pretty self explanatory
	void moneyMade(){
	    double money = (cs*CSC) +(cm*CMC) + (cl*CLC);
	    //this is technically just gross revenue, but whatever. 
	    System.out.println("Total money made: $" + money);
	}
	
	void coffeeSold(){
	    System.out.println("Small cup count:" + cs);
	    System.out.println("Medium cup count:" + cm);
	    System.out.println("Large cup count:" + cl);
	}
	
	void sold(){
	    int amountSold = cs*CSO + cm*CMO + cl*CLO;
	    System.out.println("Total amount of coffee sold: " + amountSold +" oz");
	}
	
	void printData(){
	    //the danger of similarly named functions. 
	    coffeeSold();
	    sold();
	    moneyMade();
	}
	
}