/******************************************************************************

Design a class named Time. The class contains:
•	The data fields hour, minute, and second that represent a time.
•	A no-arg constructor that creates a Time object for the current time. (The values of the data fields will represent the current time.)
•	A constructor that constructs a Time object with a specified elapsed time since midnight, January 1, 1970, in milliseconds. (The values of the data fields will represent this time.)
•	A constructor that constructs a Time object with the specified hour, minute, and second.
•	Three getter methods for the data fields hour, minute, and second, respectively.
•	A method named setTime(long elapseTime) that sets a new time for the object using the elapsed time. For example, if the elapsed time is 555550000 milliseconds, the hour is 10, the minute is 19, and the second is 10.

Draw the UML diagram for the class then implement the class. Write a test program that creates three Time objects (using new Time(), new Time(555550000), and new Time(5, 23, 55)) and displays their hour, minute, and second in the format hour:minute:second.

(Hint: For the no-arg constructor, the current time can be obtained using System.currentTimeMillis().
The currentTimeMillis method in the System class returns the current time in milliseconds elapsed since the time midnight, January 1, 1970 GMT (Assume the time is in GMT) .
Here is a sample run:
16:16:27
10:19:10
5:23:55


*******************************************************************************/
public class Time {
    //Here are the data fields for hour, minute and second
    int hour;
    int minute;
    int second;

    //No argument constructor that creates the time obect for the currentTime
    public Time() {
        long currentTimeMillis = System.currentTimeMillis();
        setTime((int)currentTimeMillis);
    }

    //Constructor to be used for setting a determined time in miliseconds.
    //Why? Look, it comes in milliseconds, we're using that
    //I am too lazy to convert it every time.
    public Time(int elapsedMillis) {
        setTime(elapsedMillis);
    }

    //constructor for inputting in each time manually.
    public Time(int hour, int minute, int second) {
        this.hour = hour;
        this.minute = minute;
        this.second = second;
    }

    //getter method section
    public int getHour() {
        return hour; //yup that's the hour
    }

    public int getMinute() {
        return minute; //mhm that's the minute
    }

    public int getSecond() {
        return second; //you betcha that's the second
    }

    //okay, math time. 
    //This function sets time, it works in conjunction with the
    //punlic constructors that create time for the current time.
    public void setTime(int elapsedMillis) {
        int totalSeconds = elapsedMillis / 1000; //miliseconds to seconds
        second = totalSeconds % 60; //seconds 
        int totalMinutes = totalSeconds / 60;
        minute = totalMinutes % 60; //minutes
        int totalHours = totalMinutes / 60;
        hour = totalHours % 24; //hours
    }

    //degbugging machine test program 
    public static void main(String[] args) {
        Time currentTime = new Time();
        Time time1 = new Time(555550000);
        Time time2 = new Time(5, 23, 55);
        
        //print the output to make sure it actually works. 
        System.out.println(currentTime.getHour() + ":" + currentTime.getMinute() + ":" + currentTime.getSecond());
        System.out.println(time1.getHour() + ":" + time1.getMinute() + ":" + time1.getSecond());
        System.out.println(time2.getHour() + ":" + time2.getMinute() + ":" + time2.getSecond());
    }
}
