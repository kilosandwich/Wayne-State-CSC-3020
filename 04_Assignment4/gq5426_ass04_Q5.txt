/******************************************************************************

Design a class named MyInteger. The class contains:
•	An int data field named value that stores the int value represented by this object.
•	A constructor that creates a MyInteger object for the specified int value.
•	A getter method that returns the int value.
•	The methods isEven(), isOdd(), and isPrime() that return true if the value in this object is even, odd, or prime, respectively.
•	The static methods isEven(int), isOdd(int), and isPrime(int) that return true if the specified value is even, odd, or prime, respectively.
•	The static methods isEven(MyInteger), isOdd(MyInteger), and isPrime(MyInteger) that return true if the specified value is even, odd, or prime, respectively.
•	The methods equals(int) and equals(MyInteger) that return true if the value in this object is equal to the specified value.
•	A static method parseInt(char[]) that converts an array of numeric characters to an int value. Do not use conversion functions to convert the numeric characters to an int.
•	A static method parseInt(String) that converts a string into an int value. Do not use conversion functions to convert the numeric string to an int.

Draw the UML diagram for the class then implement the class. Write a client program that tests all methods in the class.
Here is a sample run for n1 = 5, n2 = 24, numeric string "3539" and numeric character {'3', '5', '3', '9'}:
n1 is even? false
n1 is prime? true
15 is prime? false
3539
3539
n2 is odd? false
45 is odd? true
n1 is equal to n2? false
n1 is equal to 5? True



*******************************************************************************/
//Remember, to rename this, everything in online GDB must be renamed to Main because
//that is how it compiles it
public class MyInteger
{
    int value; //Create an indt data filed namd value that stores the int
    //value represented by this object
    
    //a constructor that creates a MyInteger object for the specified int value
    public MyInteger(int specifiedIntValue){
        this.value = specifiedIntValue;
    }
    //•	A getter method that returns the int value.
    public int getValue(){
        return this.value;
    }
    
    
    //The methods i• The methods isEven(), isOdd(), and isPrime() 
    //that return true if the value in this object is even, odd, or prime, respectively.
    //why did you specify this second?
    public static boolean isEven(int valinput){
        if((valinput % 2) == 0){
            return true;
        }else{
            return false;
        }

    }
    
    public boolean isEven(){
        return isEven(this.value);
    }
    
    //just return the opposite
    public static boolean isOdd(int valinput){
        if((valinput % 2) == 1){
            return true;
        }else{
            return false;
        }
    }
    
    public boolean isOdd(){
        return isOdd(this.value);
    }
    
    //return is prime, somehow?
    public static boolean isPrime(int n){
            // Corner case 
            if (n <= 1) 
                return false; 
      
            // Check from 2 to n/2 
            //I mean there are some numbers that are technically divisible by three ONLY
            for (int i = 2; i <= n / 2; i++) 
                if (n % i == 0) 
                    return false; 
      
            return true; 
    }
    
    public boolean isPrime(){
        return isPrime(this.value);
    }
    
    //•	The methods equals(int) and equals(MyInteger) 
    //that return true if the value in this object is equal to the specified value.
    public boolean equals(int valinput){
        if (this.value == valinput){
            return true;
        }else{
            return false;
        }
    }
    
    public boolean equals(MyInteger valinput){
        if (this.value == valinput.getValue()){
            return true;
        }else{
            return false;
        }
    }
    
    //•	A static method parseInt(char[]) that converts an array of numeric characters to an int value.
    //Do not use conversion functions to convert the numeric characters to an int.
    public static int parseInt(char[] valinput){
        int temp = 0;
        for(int i =(valinput.length -1); i>=0 ; i--){
            int intvalue = valinput[i] - '0';
            temp += intvalue * Math.pow(10, i+1);
        }
        
        return temp;
    }
    
    public static int parseInt(String valinput){
        int temp = 0;
        for(int i =(valinput.length() -1); i>=0 ; i--){
            int intvalue = valinput.charAt(i) - '0';
            temp +=  intvalue * Math.pow(10, i+1);
        }
        
        return temp;
    }
    
    
    
    
    
    //This is the main function so you can actually test it. 
	public static void main(String[] args) {
		System.out.println("Hello World");
	}
}
