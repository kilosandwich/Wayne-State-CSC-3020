/******************************************************************************

Design a class named Queue for storing integers. Like a stack, a queue holds elements. In a stack, the elements are retrieved in a last-in first-out fashion. In a queue, the elements are
retrieved in a first-in first-out fashion. The class contains:
•	An int[] data field named elements that stores the int values in the queue.
•	A data field named size that stores the number of elements in the queue.
•	A constructor that creates a Queue object with default capacity 8.
•	The method enqueue(int v) that adds v into the queue.
•	The method dequeue() that removes and returns the element from the queue.
•	The method empty() that returns true if the queue is empty.
•	The method getSize() that returns the size of the queue.

Implement the class with the initial array size set to 8. The array size will be doubled once the number of the elements exceeds the size. After an element is removed from the beginning of the array, you need to shift all elements in the array one position to the left. 
Write a test program that adds 20 numbers from 1 to 20 into the queue then removes these
numbers and displays them.

Here is a sample run after adding 1 to 20 to the queue and removed them:
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20


*******************************************************************************/
public class Queue
{
    int[] elements;//An int[] data field named elements that stores the int values in the queue.
    int size; //A data field named size that stores the number of elements in the queue.

    //•	A constructor that creates a Queue object with default capacity 8.
    public Queue(){
        this(8);//bada bing, create a constructor that calls the other constructor
    }
    public Queue(int capacity){

        this.size = capacity;
        this.elements = new int[capacity];
        
    }
    
    //The method enqueue int v that adds v into the queue;
    public void enqueue(int v){
        //if the last element is full, time to expand the array;
        //in java, empty arraysindecides have the value 0 for numeric types.
        if(elements[size-1] == 0){
            size *=2;
            int[] elementsTemp = new int[size];
            System.arraycopy(elements,0,elementsTemp,0,size);
            elements = elementsTemp;
        }
        
        elements[size] = v;
        
    }
    
    public int dequeue(){
        int temp = this.elements[0];
        //shift everything backwards
        for(int i=1; i<size;i++){
            this.elements[i-1] = this.elements[i];
        }
        return temp;
    }
    
    public boolean empty(){
        //my the nature of queues, if the front is empty, the whole
        //thing is empty, only need to check the front;
        if(elements[0] == 0){
            return false;
        }else{
            return true;
        }
    }
    
    public int getSize(){
        return size;
    }


    
    //this is the debugging section in case you need to debug...
	public static void main(String[] args) {
		System.out.println("Hello World");
	}
}
